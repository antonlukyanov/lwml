// Двумерное быстрое преобразование Фурье
// lwml, (c) ltwood

#ifndef _FFT2D_
#define _FFT2D_

#include "defs.h"
#include "mdefs.h"
#include "matrix.h"

/*#lake:stop*/

namespace lwml {

// Прямое и обратное двумерное быстрое преобразование Фурье.
// Реализован расчет с замещением, когда спектр помещается на место исходных данных.
// Порядок отсчетов определяется следующими соотношениями:
// X[N - n][m] = X[-n][m], X[n][M - m] = X[n][-m].
// В результате получается следующее упорядочение отсчетов:
// ^         где       ^
// |3  4             2 | 1
// |                -------->
// |1  2             4 | 3
// ------->

// Функция disturb() производит умножение матрицы на функцию (-1)^(n+m),
// что в спектральной области эквивалентно сдвигу спектра:
// X'[n][m] = X[n - N/2][m - M/2]
// т.е. нуль в спектре сдвигается в точку (N/2, M/2).
// Строка n=0 и столбец m=0 соответствуют частотам Найквиста.

class fft2d : public scope {
public:
  // Прямое двумерное быстрое преобразование Фурье.
  // Исходные данные сворациваются с ядром
  // exp[-i (2\pi/N) kn] exp[-i (2\pi/M) lm]
  // и результат нормируется коэффициентом 1/(N1*N2).
  // Аргумент tick позволяет включить вывод сообщений и прогрессе.
  static void cfft( matrix& rm, matrix& im, tick_mode tick = tmOFF );

  // Обратное быстрое двумерное дискретное преобразование фурье.
  // Исходные данные сворациваются с ядром
  // exp[i (2\pi/N) kn] exp[i (2\pi/M) lm] без нормировки.
  // Аргумент tick позволяет включить вывод сообщений и прогрессе.
  static void cifft( matrix& rm, matrix& im, tick_mode tick = tmOFF );

  // Преобразование исходных данных при БПФ,
  // приводящее к сдвигу нуля в спектре в точку (N/2, M/2).
  static void disturb( matrix& );
};

}; // namespace lwml

#endif // _FFT2D_
