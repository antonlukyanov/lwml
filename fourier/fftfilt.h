// Фильтры в спектральной области

#ifndef _FFTFILT_
#define _FFTFILT_

#include "lwml/base/defs.h"
#include "lwml/m_base/mdefs.h"
#include "lwml/m_types/vector.h"
#include "lwml/m_base/i_func.h"

/*#lake:stop*/

namespace lwml {

// Линейный фильтр в спектральной области
// Производит линейную фильтрацию частотной характеристикой
// При конструировании указывается максимальная длина обрабатываемых данных
// Фильтрацию осуществляет оператор operator()
// Первый аргумент - вектор, в который помещается результат фильтрации,
// второй аргумент - вектор с исходными данными
// Эти векторы должны иметь одинаковую длину
// Третий аргумент - параметр фильтра - АЧХ фильтра
// При этом ФЧХ фильтра считается нулевой, АЧХ должна быть симметричной
// аргумент функции - нормализованная частота, изменяющаяся от -1/2 до 1/2

class fft_filter : public value {
public:
  fft_filter( int len );

  void operator()( vector& dst, const vector& src, const i_function& );

private:
  int _dlen;    // максимальная длина данных
  int _splen;   // длина спектра            
  vector _xr, _xi;
};

// пороговый фильтр в спектральной области
// Производит нелинейную пороговую фильтрацию с порогом
// При конструировании указывается максимальная длина обрабатываемых данных
// Фильтрацию осуществляет оператор operator()
// Первый аргумент - вектор, в который помещается результат фильтрации,
// второй аргумент - вектор с исходными данными
// Эти векторы должны иметь одинаковую длину
// Третий аргумент - параметр фильтра - порог отсечения
// Порог интерпретируется как доля от мощности самой мощной спектральной составлящей,
// при превышении которой спектральная составляющая пропускается фильтром
// Возвращаемое значение равно доле задержанной мощности от общей мощности сигнала

class threshold_filter : public value {
public:
  threshold_filter( int len );

  real operator()( vector& dst, const vector& src, real );

private:
  int _dlen;    // максимальная длина данных
  int _splen;   // длина спектра
  vector _xr, _xi;
};

}; // namespace lwml

#endif // _FFTFILT_
