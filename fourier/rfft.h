// FFT for real signals
// lwml, (c) ltwood

#ifndef _RFFT_
#define _RFFT_

#include "lwml/base/defs.h"
#include "lwml/m_base/mdefs.h"

#include "lwml/m_types/vector.h"
#include "lwml/m_types/cmplx.h"

/*#lake:stop*/

namespace lwml {

class rfft : public scope {
public:
  // Одновременное прямое БПФ для двух вещественных массивов
  // Ядро преобразования и нормирующий множитель см. cfft().
  // Алгоритм реализуют расчет с замещением, когда результат вычислений
  // помещается на место исходных данных.
  // a - первый массив исходных вещественных отсчетов
  // b - второй массив исходных вещественных отсчетов
  // После выполнения функции отсчеты спектров A[] и B[] в массивах a[] и b[]
  // расположены следующим образом:
  // j    : 0       1     ... N/2-1     N/2       ... N-2   N-1
  // a[j] : Ar[0]   Ar[1] ... Ar[N/2-1] Br[N/2-1] ... Br[1] Br[0]
  // b[j] : Ar[N/2] Ai[1] ... Ai[N/2-1] Bi[N/2-1] ... Bi[1] Br[N/2]
  static void rcfft2( vector& a, vector& b );

  // Одновременное обратное БПФ для двух спектров вещественных массивов.
  // Ядро преобразования и нормирующий множитель см. cifft().
  // Алгоритм реализуют расчет с замещением, когда результат вычислений
  // помещается на место исходных данных.
  // a - первый массив отсчетов спектра
  // b - второй массив отсчетов спектра
  // Порядок отсчетов в исходном спектре соответствует порядку отсчетов
  // результирующего спектра в функции rfft2().
  static void crifft2( vector& a, vector& b );

  // Прямое БПФ вещественной последовательности.
  // Ядро преобразования и нормирующий множитель см. cfft().
  // Алгоритм реализуют расчет с замещением, когда результат вычислений
  // помещается на место исходных данных.
  // a - первый массив исходных вещественных отсчетов
  // b - второй массив исходных вещественных отсчетов
  // Размещение отсчетов исходной последовательности x[] в массивах a[] и b[]
  // перед вызовом функции должно быть следующим:
  // j    : 0    1    ... N/2-1
  // a[j] : x[0] x[2] ... x[N-2]
  // b[j] : x[1] x[3] ... x[N-1]
  // После выполнения функции отсчеты спектра X[] в массивах a[] и b[]
  // расположены следующим образом:
  // j    : 0       1     ... N/2-1
  // a[j] : Xr[0]   Xr[1] ... Xr[N/2-1]
  // b[j] : Xr[N/2] Xi[1] ... Xi[N/2-1]
  static void rcfft( vector& a, vector& b );

  // Обратное БПФ спектра вещественной последовательности.
  // Ядро преобразования и нормирующий множитель см. cifft().
  // Алгоритм реализуют расчет с замещением, когда результат вычислений
  // помещается на место исходных данных.
  // a - первый массив отсчетов спектра
  // b - второй массив отсчетов спектра
  // Порядок отсчетов в исходном спектре соответствует порядку отсчетов
  // результирующего спектра в функции rfft().
  // Порядок отсчетов в восстановленном сигнале соответствует порядку
  // отсчетов сигнала в функции rfft().
  static void crifft( vector& a, vector& b );
};

}; // namespace lwml

#endif // _RFFT_
