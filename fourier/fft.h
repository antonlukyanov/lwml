// Быстрое преобразование Фурье
// lwml, (c) ltwood

#ifndef _FFT_
#define _FFT_

#include "lwml/base/defs.h"
#include "lwml/m_base/mdefs.h"

#include "lwml/m_types/vector.h"
#include "lwml/m_types/cmplx.h"

/*#lake:stop*/

namespace lwml {

class fft : public scope {
public:
  // Прямое вычисление ДПФ
  // Это - тривиальная реализация (не БПФ!) прямого ДПФ (только для тестов).
  // За один вызов вычисляется один отсчет прямого преобразования.
  // xr - массив исходных отсчетов (вещественная часть)
  // xi - массив исходных отсчетов (мнимая часть)
  // n - номер вычисляемого отсчета спектра
  // Возвращает значение вычисляемого отсчета спектра
  // Вещественный тип параметра n позволяет вычислять значения спектра
  // между отсчетами DFT.
  static cmplx simple_dft( const vector& xr, const vector& xi, real n );

  // Прямое вычисление обратного ДПФ
  // Это - тривиальная реализация (не БПФ!) обратного ДПФ (только для тестов).
  // За один вызов вычисляется один отсчет обратного преобразования.
  // XR - массив отсчетов спектра (вещественная часть)
  // XI - массив отсчетов спектра (мнимая часть)
  // k - номер вычисляемого отсчета временного ряда
  // Возвращает значение вычисляемого отсчета временного ряда
  // Вещественный тип параметра k позволяет вычислять значения спектра
  // между отсчетами IDFT.
  static cmplx simple_idft( const vector& XR, const vector& XI, real k );

  // Базовый алгоритм БПФ
  // Здесь вычисляется свертка исходной последовательности с ядром
  // вида exp[-i (2\pi/N) kn] без каких-либо нормирующих коэффициентов.
  // Алгоритм реализуют расчет с замещением, когда результат вычислений
  // помещается на место исходных данных.
  // x - массив исходных данных (вещественная часть)
  // y - массив исходных данных (мнимая часть)
  static void base_fft( vector& x, vector& y );

  // Прямое быстрое дискретное преобразование Фурье
  // Здесь вычисляется то же, что и в base_fft(), но результат
  // нормируется коэффициентом (1/N).
  // Алгоритм реализуют расчет с замещением, когда результат вычислений
  // помещается на место исходных данных.
  // a - массив исходных отсчетов (вещественная часть)
  // b - массив исходных отсчетов (мнимая часть)
  static void cfft( vector& a, vector& b );

  // Обратное быстрое дискретное преобразование Фурье
  // Вычисляется свертка данных с ядром exp[+i (2\pi/N) kn]
  // без нормирующего коэффициента.
  // Вычисления проводятся с использованием функции base_fft().
  // Алгоритм реализуют расчет с замещением, когда результат вычислений
  // помещается на место исходных данных.
  // a - массив отсчетов спектра (вещественная часть)
  // b - массив отсчетов спектра (мнимая часть)
  static void cifft( vector& a, vector& b );

  // Сдвиг спектра
  // Функция реализует преобразование исходной последовательности отсчетов,
  // обеспечивающее сдвиг спектра вправо на N/2 отсчетов.
  // При этом нуль в спектре сдвигается в точку N/2 и спектр становится
  // симметричным относительно этой точки (для вещественных данных).
  // Преобразование состоит в умножении отсчетов на (-1)^k.
  // Результат преобразования помещается на место исходных данных.
  // Нулевой отсчет соответствует частоте Найквиста.
  static void disturb( vector& v );

private:
  static void binrevers( vector& );
  static void scale( vector& );
  static void resort( vector& );
};

}; // namespace lwml

#endif // _FFT_
