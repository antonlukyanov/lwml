// FFT for real matrix
// lwml, (c) ltwood

#ifndef _RFFT2D_
#define _RFFT2D_

#include "defs.h"
#include "mdefs.h"

#include "matrix.h"

/*#lake:stop*/

namespace lwml {

// ѕр€мое и обратное двумерное быстрое преобразование ‘урье дл€ вещественной матрицы.
// –еализован расчет с замещением, когда спектр помещаетс€ на место исходных данных.
// ѕор€док отсчетов в двумерном спектре общего вида описан в fft2d.h.
// —пектр размещаетс€ в исходной вещественной матрице специфическим образом:
// 1. ¬ычисл€ютс€ и сохран€ютс€ только отсчеты спектра X[n][m] дл€
//    0 <= n <= N/2, 0 <= m < M (т.е. по строкам сохран€етс€ половина спектра).
//    ќстальные отсчеты могут быть получены из следущих соотношений:
//    X[N - n][m] = X[-n][m], (справедливо всегда, см. fft2d.h)
//    X[-n][-m] = X*[n][m] (справедливо дл€ вещественной матрицы).
// 2. ƒл€ 0 < n < N/2, 0 <= m < M (т.е. дл€ всех n кроме 0 и N/2)
//    отсчеты спектра X[n][m] сохран€ютс€ в матрице следующим образом:
//    matr[2*n][m] = re(X[n][m]), matr[2*n+1][m] = im(X[n][m]).
// 3. ƒл€ n=0 и n=N/2 отсчеты спектра X[n][m] сохран€ютс€ в первых
//    двух строках матрицы следующим образом:
//      j          : 0       1     ... M/2-1     M/2       ... M-2   M-1
//      matr[0][j] : Xr[0]   Xr[1] ... Xr[M/2-1] Yr[M/2-1] ... Yr[1] Yr[0]
//      matr[1][j] : Xr[M/2] Xi[1] ... Xi[M/2-1] Yi[M/2-1] ... Yi[1] Yr[M/2]
//    где
//      Xr[j] = re(X[0][j]),
//      Xi[j] = im(X[0][j]),
//      Yr[j] = re(X[N/2][j]),
//      Yi[j] = im(X[N/2][j]).

class rfft2d : public scope {
public:
  // ѕр€мое двумерное быстрое преобразование ‘урье вещественной матрицы.
  // ќписание €дра и нормировки см. fft2d::cfft().
  // јргумент tick позвол€ет включить вывод сообщений и прогрессе.
  static void rcfft( matrix& m, tick_mode tick = tmOFF );

  // ќбратное двумерное быстрое преобразование ‘урье спектра вещественной матрицы.
  // ќписание €дра и нормировки см. fft2d::cifft().
  // јргумент tick позвол€ет включить вывод сообщений и прогрессе.
  static void crifft( matrix& m, tick_mode tick = tmOFF );
};

}; // namespace lwml

#endif // _RFFT2D_
