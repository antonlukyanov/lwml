// Простой B-сплайн

#ifndef _BSPLINE_
#define _BSPLINE_

// Класс содержит реализацию алгоритма построения простого B-сплайна.
//   Пусть заданы числа p_0, p_1, ..., p_{n-1},
//   соответствующие значениям 0, 1, ..., n-1 параметра t.
//   По этим точкам строится кусочно-полиномиальная функция (сплайн) P(t).
//   На каждом отрезке в качестве функции выбирается кубический полином,
//   аргумент которого изменяется от 0 до 1.
//   Отрезку [j, j+1] соответствует функция P_j(t), которая строится
//   по значениям p_{j-1}, p_j, p_{j+1}, p_{j+2} (т.е. 1 <= j < n-2).
//   Таким образом, при j < t < j+1 выполнено равенство
//     P(t) = P_j(t-j).
//   Для построенной функции оказываются выполненными равенства:
//     P_j(0) = (p_{j-1} + 4p_j + p_{j+1})/6,
//     P_j(1) = (p_j + 4p_{j+1} + p_{j+2})/6,
//   т.е. P_j(0) и P_j(1) не совпадают с p_j и p_{j+1}.
//   B-сплайн не проходит точно через точки, по которым он построен!
//   Построенный сплайн и его первые 2 производные являются
//   непрерывными функциями.
// Функция set() вычисляет значения коэффициентов кубического полинома
// по значениям p_{j-1}, p_j, p_{j+1}, p_{j+2} - это параметры p1, p2, p3, p4.
// Функция calc() вычисляет значения построенного полинома
// при значениях аргумента из отрезка [0, 1].

#include "lwml/base/defs.h"
#include "lwml/m_base/mdefs.h"
#include "lwml/m_types/polyn.h"

/*#lake:stop*/

namespace lwml {

class bspline : public value {
public:
  void set( real p1, real p2, real p3, real p4 );

  real calc( real );

private:
  real _data[4];
};

}; // namespace lwml

#endif // _BSPLINE_
