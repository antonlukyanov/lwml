// Чтение таблицы значений функции
// lwml, (c) ltwood

#ifndef _FDATA_
#define _FDATA_

//!! TODO: проверить на консистентность

#include "lwml/base/defs.h"
#include "lwml/m_base/mdefs.h"
#include "lwml/m_types/vector.h"
#include "lwml/io/stream.h"
#include "lwml/base/refowner.h"

/*#lake:stop*/

namespace lwml {

// Исключение при ошибке интерпретации содержимого файла

DEF_EX_TYPE_MSG(ex_integrity, ex_funcdata, "error reading funcdata");

// Класс реализует чтение из файла значений функции.
// Считается, что в каждой строке файла размещена пара чисел -
// значеник аргумента и значение функции.
// Не предполагается упорядоченность значений аргументов.
// При конструировании указывается имя файла с данными.
// Функция len() дает число отсчетов функции.
// delta() возвращает средний шаг по аргументу.
// delta_var() возвращает среднее отклонение шага по аргументу
// от среднего значения шага.
// Методы ax() и bx() дают минимальное и максимальное значения аргумента.
// print_resume() печатает в текстовый файл отчет по прочитанным данным.
// get_arg() и get_val() копируют в вектор соответственно значения
// аргумента и функции.
// Длина вектора должна в точности соответствовать длине данных.
// get_interp() помещает в вектор результат интерполяции исходной
// функциональной зависимости.
// Число вычисляемых значений определяется длиной переданного вектора.
// Возвращаемое значение - шаг по аргументу в полученной интерполяции.

class funcdata : public value {
public:
  // конструирование по имени файла с данными.
  funcdata( const char* );

  // Конструирование по паре векторов.
  funcdata( const vector&, const vector& );

  // Получение длины данных.
  int len() const { return _len; };

  real delta();        // средний шаг по аргументу
  real delta_var();    // среднее отклонение шага по аргументу

  real ax() const { return _ax; } // минимальное значение аргумента
  real bx() const { return _bx; } // максимальное значение аргумента

  void print_resume( referer<stream> ); // вывод сводки по данным

  void get_arg( vector& ); // получение вектора аргументов
  void get_val( vector& ); // получение вектора значений

  real get_interp( vector& ); // получение интерполяции

private:
  int _len;
  vector _arg, _dat;
  real _ax, _bx;
};

}; // namespace lwml

#endif // _FDATA_
