#include "spfunc.h"

/*#lake:stop*/

namespace lwml {

// Константа, зависящая от реализации.
// Используется для улучшения сходимости.

const int LGM_LIM = 7;

// коэффициенты асимптотического разложения
// логарифма гамма-функции

const long double spfunc::lg_coeff[20] = {
   1.0 / 12.0, -1.0 / 360.0, 1.0 / 1260.0, -1.0 / 1680.0, 1.0 / 1188.0,
   -691.0 / 360360.0, 1.0 / 156.0, -3617.0 / 122400.0, 43867.0 / 244188.0,
   -174611.0 / 125400.0, 77683.0 / 5796.0, -236364091.0 / 1506960.0,
   657931.0 / 300.0, -3392780147.0 / 93960.0, 1723168255201.0 / 2492028.0,
   -7709321041217.0 / 505920.0, 151628697551.0 / 396.0,
   -26315271553053477373.0 / 2418179400.0, 154210205991661.0 / 444.0,
   -261082718496449122051.0 / 21106800.0
};

// Функция log_gamma() вычисляет натуральный логарифм
// полной гамма-функции, используя асимптотическое
// разложение Стирлинга
// см. М.Абрамовиц, И.Стиган
// Справочник по специальным функциям (М: Мир, 1979)
// Первые 20 членов дают результат с 50 цифрами.
// При x <= 0 инициируется ошибка.

real spfunc::log_gamma( real x )
{
  if( x <= 0.0 )
    fail_assert("inadmissible negative argument");

  if( x == 1.0 || x == 2.0 )
    return 0.0;

  real z = 0.0;
  while( x < LGM_LIM ){               // увеличить аргумент, если необходимо
    z += log(x);
    x += 1.0;
  }

  real den, x2, presum, sum;
  den = x;
  x2 = x * x;                         // вычисление асимптотического разложения
  presum = (x - 0.5) * log(x) - x + 0.9189385332046727417803297364;
  for( int i = 0; i < 20; i++ ){
    sum = presum + lg_coeff[i] / den;
    if( sum == presum ) break;
    den = den * x2;
    presum = sum;
  }

  return sum - z;                     // учесть увеличенное значение аргумента
}

}; // namespace lwml
