// Основные статистические распределения.
// Для каждого распределения приводится функция,
// вычисляющая значение функции распределения и ее квантилей.
// Исходный код основан на статье П.Н.~Дубнер, 2000
// "Справочник по статистическим распределениям"
// http://algolist.manual.ru/maths/matstat/index.php

// Комментарий П.Н.~Дубнера по поводу "Numerical Recipes in C":
// |Без всякого удовольствия считаю себя обязанным предостеречь
// |от некритического использования методов, описываемых в широко
// |известной книжке W.H.Press и др. "Numerical Recipes in C".
// |Все описанные в ней методы, которые я исследовал, оказались плохими
// |или неработоспособными.
// |Скажем, предложенные приемы вычисления цепных дробей неизменно
// |приводили в моих экспериментах к переполнению, либо к результатам,
// |далеко уклоняющимся от верных.

// Комментарий по используемой терминологии:
// |Если F(x) - функция распределения, то значения x, для которого
// |выполнено равенство F(x) = p называется p-квантилем распределения.
// |Функция G(p), ставящая в соответствие каждому p из отрезка [0,1]
// |квантиль x, называется обратной функцией распределения.
// Пояснение к статистическим распределениям:
// |chisq():
// |если для данных X и DF получено значение P=chisq(X, DF), то это значит,
// |что с веротностью P значение статистики д.б. меньше X
// |- если P слишком велико, то и X излишне велико т.е. распределения
// |  различаются излишне сильно
// |- если P слишком мало, то и X излишне мало т.е. распределения
// |  излишне близки для случайного испытания
// |Значение P из отрезка              считают
// |  [0.00,0.01], [0.99,1.00]         неудовлетворительным   (--)
// |  [0.01,0.05], [0.95,0.99]         подозрительным         (-+)
// |  [0.05,0.10], [0.90,0.95]         слегка подозрительным  (+-)
// |  [0.10,0.90]                      нормальным             (++)

#ifndef _STATFN_
#define _STATFN_

#include "lwml/base/defs.h"
#include "lwml/m_base/mdefs.h"

/*#lake:stop*/

namespace lwml {

class statfn : public scope {
public:
  // Бета-распределение
  // Функция распределения Beta(x|a,b).
  // вероятность того, что случайная величина,
  // подчиняющаяся бета-распределению с параметрами a и b,
  // меньше или равна x.
  static real beta( real x, real a, real b );

  // Бета-распределение
  // Обратная функция: Beta(x|a,b)=p.
  // Ищет такое значение x, для которого Beta(x|a,b) = p,
  // т.е. равна p вероятность того, что случайная величина,
  // подчиняющаяся бета-распределению с параметрами a и b,
  // меньше или равна x.
  static real beta_inv( real p, real a, real b );

  // Гамма-распределение
  // Функция распределения Gamma(x|shape,scale)
  // Вычисляется Gamma(x|a):
  // вероятность того, что случайная величина,
  // подчиняющаяся центральному гамма-распределению с параметром a,
  // меньше или равна x.
  static real gamma( real x, real shape, real scale = 1.0 );

  // Гамма-распределение
  // Обратная функция: Gamma(x|shape,scale)=p
  // Ищет такое значение x, для которого Gamma(x|a) = p,
  // т.е. равна p вероятность того, что случайная величина,
  // подчиняющаяся центральному гамма-распределению с параметром a,
  // меньше или равна x.
  static real gamma_inv( real p, real shape, real scale = 1.0 );

  // Стандартное нормальное распределение
  // Вычисляет вероятность того, что случайная величина,
  // подчиняющаяся стандартному нормальному распределению,
  // принимает значение, не превосходящее x.
  static real gauss( real x );

  // Стандартное нормальное распределение
  // Вычисляется квантиль уровня level,
  // который, согласно определению, является корнем уравнения
  //   N(x) = level,
  // где N(x) - стандартное нормальное распределение.
  // Решение уклоняется от точного значения не более, чем на 0.00045.
  // Конечно, значение level должно быть заключено между 0 и 1.
  static real gauss_inv( real level );

  // Распределение Стьюдента
  // Вычисляется вероятность того, что случайная величина,
  // подчиняющаяся распределению Стьюдента (T-распределению)
  // c n степенями свободы, не превосходит (меньше или равна) x.
  static real student( real x, real n );

  // Распределение Стьюдента
  // По данной вероятности p вычисляется значение q,
  // для которого student(q,n) вернет p.
  static real student_inv( real p, real n );

  // Распределение хи-квадрат
  // Вычисляется вероятность того, что случайная величина,
  // подчиняющаяся распределению хи-квадрат с f степенями свободы,
  // не превосходит заданного значения x.
  static real chi2( real x, real f );

  // Распределение хи-квадрат
  // Вычисляется значение х для которого chi2(x, f) вернет q.
  static real chi2_inv( real x, real f );

  // Распределение Фишера
  // Вычисляет вероятность того, что случайная величина,
  // подчиняющаяся центральному F-распределению с параметрами n1 и n2,
  // не превосходит заданного значения x.
  static real fisher( real x, real n1, real n2 );

  // Распределение Фишера
  // Ищет точку, в которой функция F-распределения
  // с параметрами n1 и n2 равняется p
  static real fisher_inv( real p, real n1, real n2 );

private:
  static real beta_frac( real a, real b, real x );
  static real gamma_frac( real x, real shape, real scale );
  static real gamma_ser( real x, real shape, real scale );
};

}; // namespace lwml

#endif // _STATFN_
