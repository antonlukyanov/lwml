// Фибоначчиев датчик случайных чисел
// lwml, (c) ltwood

#ifndef _FRAND_
#define _FRAND_

#include "defs.h"
#include "mdefs.h"

/*#lake:stop*/

namespace lwml {

// Константы SH0 и SH1 - магические
// Допустимы также следующие значения
// SH0 = 17, SH1 = 5
// SH0 = 97, SH1 = 33
// Константа SH0 определяет размерность пространства вложения
// случайных векторов, при которой гарантируется отсутствие
// выраженной латентной структуры.
// Константа SH1 однозначно определяется выбором значения константы SH0

const int SH0 = 55;
const int SH1 = 24;

// Высококачественный фибоначчиев датчик случайных чисел
// Генерирует вещественные случайные числа,
// равномерно распределенные на интервале [0, 1).
// Этот датчик использует фибоначчиев алгоритм,
// реализованный непосредственно в вещественной арифметике.
// Для борьбы с последовательными корреляциями используется
// схема перемешивания (shuffle box, Bays-Durham)
// Получаемые случайные числа обладают хорошими статистическими свойствами,
// причем все биты случайного числа равнозначны по статистическим свойствам.
// Для генерирования нормального распределения
// использован метод Бокса-Мюллера-Белла.
//
// На этапе инициализации фибоначчиев датчик случайных чисел использует
// стандартный линейный конгруентный датчик

const int SHUFFLE_BOX_SIZE = 256;

class frand : public value {
public:
  // Инициализация датчика
  // seed - используется для инициализации линейного
  // конгруентного датчика, который используется при инициализации
  frand( uint seed = 1 );

  // Получить случайное вещественное число
  // Возвращает вещественное случайное число,
  // равномерно распределенное на интервале [0, 1)
  real get_real();

  // Получить случайное целое число
  // range определяет интервал генерируемых чисел
  // Возвращает целое случайное число,
  // равномерно распределенное на отрезке [0, range-1]
  uint get_int( uint range ){
    return uint_cast(get_real() * range);
  }

  // Получить случайное число с нормальным распределением
  // Возвращает вещественное случайное число,
  // распределенное по нормальному закону с параметрами M=0 и D=1
  real get_norm();

private:
  int _index;
  real _buf[SH0];
  real _prev, _sht[SHUFFLE_BOX_SIZE];

  real get();
};

inline real frand::get()
{
  real res = _buf[_index] - _buf[(_index + SH1) % SH0];
  if( res < 0.0 ) res += 1.0;
  _buf[_index] = res;
  _index = (_index - 1 + SH0) % SH0;
  return res;
}

inline real frand::get_real()
{
  real next = get();
  int sh_idx = int_cast(_prev * SHUFFLE_BOX_SIZE);
  _prev = _sht[sh_idx];
  _sht[sh_idx] = next;
  return _prev;
}

}; // namespace lwml

#endif // _FRAND_
