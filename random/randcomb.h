// Случайные перестановки и выборки

#ifndef _RANDCOMB_
#define _RANDCOMB_

#include "lwml/base/defs.h"
#include "lwml/m_base/mdefs.h"
#include "lwml/random/frand.h"
#include "lwml/m_types/ivector.h"

/*#lake:stop*/

namespace lwml {

// Генератор случайных перестановок
// Реализует алгоритм генерирования случайной
// перестановки целых чисел из диапазона 0..len-1
// Фактически инкапсулирует перестановку как массив
// целых чисел с возможностью индексирования
// и операцией перехода к следующей перестановке.

class randperm : public value {
public:
  // Инициализация генератора перестановок
  // len - определяет диапазон [0, len-1],
  // из которого выбираются переставляемые числа. 
  // seed - стартовое значение для локального
  // датчика случайных, используемого при генерации
  // случайных перестановок.
  randperm( int len, uint seed = 1 );

  // Сгенерировать следующую перестановку
  // При инициализации генератор устанавливает
  // тождественную перестановку и вызывает эту функцию
  // для генерирования первой случайной перестановки.
  void next();

  // Получить длину перестановки
  int len() const { return _len; }

  // Получить элемент перестановки, стоящий в ней на j-ом месте
  int operator[]( int j ) const { return _data[j]; }

private:
  int _len;
  int_vector _data;
  frand _rnd;

  void swap( int i, int j );
};

// Генератор случайных выборок
// Реализует алгоритм генерирования случайной выборки длиной в len элементов
// из генеральной совокупности мощностью в range элементов.
// Фактически инкапсулирует массив длиной в len элементов,
// каждый из которых принимает значения из отрезка [0, range-1].

class randselect : public value {
public:
  // Инициализация генератора выборок
  // Выборка представляет собой массив из len целых чисел,
  // каждое из которых принимает значения из отрезка [0, range-1].
  // seed - стартовое значение для локального
  // датчика случайных, используемого при генерации
  // случайных выборок.
  randselect( int len, int range, uint seed = 1 );

  // Сгенерировать следующую выборку
  // При инициализации эта функция вызывается
  // для генерирования первой случайной выборки.
  void next();

  // Получить длину выборки.
  int len() const { return _len; }

  // Получить длину генеральной совокупности
  // Длина генеральной совокупности определяет диапазон
  // изменения для каждого элемента выборки.
  int range() const { return _range; }

  // Получить элемент выборки, стоящий в ней на j-ом месте
  // j лежит в диапазоне [0, len]
  // Возвращаемое значение лежит в диапазоне [0, range-1]
  int operator[]( int j ) const { return _data[j]; }

private:
  int _len;
  int _range;
  int_vector _data;
  frand _rnd;
};

}; // namespace lwml

#endif // _RANDCOMB_
